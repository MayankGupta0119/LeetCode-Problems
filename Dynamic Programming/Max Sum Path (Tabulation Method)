Problem Statement

You have been given an N*M matrix filled with integer numbers, find the maximum sum that can be obtained from a path starting from any cell in the first row to any cell in the last row.
From a cell in a row, you can move to another cell directly below that row, or diagonally below left or right. So from a particular cell (row, col), we can move in three directions i.e.
Down: (row+1,col)
Down left diagonal: (row+1, col-1)
Down right diagonal: (row+1, col+1)

#include <bits/stdc++.h>
int getMaxPathSum(vector<vector<int>> &matrix)
{
    int n = matrix.size();
    int m = matrix[0].size();
    vector<vector<int>> dp(n, vector<int>(m,0));
    for(int j = 0;j<m;j++){
        dp[0][j] = matrix[0][j];
    }
    for(int i = 1;i<n;i++){
        for(int j = 0;j<m;j++){
            int straight = matrix[i][j]+dp[i-1][j];
            int leftdg = matrix[i][j];
            if(j-1>=0){
                leftdg += dp[i-1][j-1];
            }
            else{
                leftdg = -1e8;
            }
            int rightdg = matrix[i][j];
            if(j+1 < m){
                rightdg += dp[i-1][j+1];
            }
            else{
                rightdg = -1e8;
            }
            dp[i][j] = max(straight,max(rightdg,leftdg));
        }
    }

    int maxi = -1e8;
    for(int j = 0;j<m;j++){
        maxi = max(maxi,dp[n-1][j]);
    }
    return maxi;
}
