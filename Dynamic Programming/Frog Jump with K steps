#include <iostream>
#include <vector>
#include <algorithm>
#include <climits>
using namespace std;
void combsum2(int ind, int target, vector<int> &arr, vector<vector<int>> &ans, vector<int> &ds)
{
    if (target == 0)
    {
        ans.push_back(ds);
        return;
    }
    for (int i = ind; i < arr.size(); i++)
    {
        if (i > ind && arr[i - 1] == arr[i])
        {
            continue;
        }
        if (arr[i] > target)
        {
            break;
        }
        ds.push_back(arr[i]);
        combsum2(i + 1, target - arr[i], arr, ans, ds);
        ds.pop_back();
    }
}
int calcjump(int ind, vector<int> &dp, vector<int> &arr, int k)
{
    if (ind == 0)
    {
        return 0;
    }
    int mini = INT_MAX;
    for (int i = 1; i <= k; i++)
    {
        if (ind - i >= 0)
        {
            dp[ind] = abs(arr[ind] - arr[ind - i]) + calcjump(ind - i, dp, arr, k);
        }
        mini = min(mini, dp[ind]);
    }
    return dp[ind] = mini;
}
int main()
{
    int n;
    cin >> n;
    vector<int> arr;
    for (int i = 0; i < n; i++)
    {
        int x;
        cin >> x;
        arr.push_back(x);
    }
    int k;
    cin >> k;
    vector<int> dp(n + 1, -1);
    int cost = calcjump(n - 1, dp, arr, k);
    cout << dp[n - 1] << endl;
}
