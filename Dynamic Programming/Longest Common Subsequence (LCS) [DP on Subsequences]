Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.

A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.

For example, "ace" is a subsequence of "abcde".
A common subsequence of two strings is a subsequence that is common to both strings.

Memoization:

class Solution {
public:
    int maxlcslength(int ind1,int ind2,string s1,string s2, vector<vector<int>> &dp){
        if(ind1<0 || ind2 <0){
            return 0;
        }
        if(dp[ind1][ind2] != -1){
            return dp[ind1][ind2];
        }
        if(s1[ind1] == s2[ind2]){
            return dp[ind1][ind2] = 1+maxlcslength(ind1-1,ind2-1,s1,s2,dp);
        }
        return dp[ind1][ind2] = max(maxlcslength(ind1,ind2-1,s1,s2,dp),maxlcslength(ind1-1,ind2,s1,s2,dp));
    }
    int longestCommonSubsequence(string text1, string text2) {
        int n = text1.length();
        int m = text2.length();
        vector<vector<int>> dp(n,vector<int>(m,-1));
        return maxlcslength(n-1,m-1,text1,text2,dp);
    }
};
*********************************************************************************************************************************************************************
Tabulation:

int lcs(string s, string t)
{
	int n = s.length();
	int m = t.length();
	vector<vector<int>> dp(n+1,vector<int>(m+1,0));
	for(int i = 0;i<n;i++){
		dp[i][0] = 0;
	}
	for(int j = 0;j<m;j++){
		dp[0][j] = 0;
	}
	for(int i = 1;i<=n;i++){
		for(int j = 1;j<=m;j++){
			if(s[i-1] == t[j-1]){
				dp[i][j] = 1+dp[i-1][j-1];
			}
			else{
				dp[i][j] = max(dp[i-1][j],dp[i][j-1]);
			}
		}
	}
	return dp[n][m];
}
