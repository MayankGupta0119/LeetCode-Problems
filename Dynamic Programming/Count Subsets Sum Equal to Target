#include <iostream>
#include <vector>
using namespace std;
int findsum(int ind, int target, vector<vector<int>> &dp, vector<int> &v)
{
    if (target == 0)
    {
        return 1;
    }
    if (ind == 0)
    {
        if (v[0] == target)
        {
            return 1;
        }
        else
        {
            return 0;
        }
    }
    if (dp[ind][target] != -1)
    {
        return dp[ind][target];
    }
    int not_take = findsum(ind - 1, target, dp, v);
    int take = 0;
    if (v[ind] <= target)
    {
        take = findsum(ind - 1, target - v[ind], dp, v);
    }
    return dp[ind][target] = (take + not_take);
}
int main()
{
    int n;
    cin >> n;
    vector<int> v;
    for (int i = 0; i < n; i++)
    {
        int num;
        cin >> num;
        v.push_back(num);
    }
    int target;
    cin >> target;
    vector<vector<int>> dp(n, vector<int>(target + 1, -1));
    cout << findsum(n - 1, target, dp, v);
}
