Problem Statement
You have been given an N*M matrix filled with integer numbers, find the maximum sum that can be obtained from a path starting from any cell in the first row to any cell in the last row.
From a cell in a row, you can move to another cell directly below that row, or diagonally below left or right. So from a particular cell (row, col), we can move in three directions i.e.
Down: (row+1,col)
Down left diagonal: (row+1, col-1)
Down right diagonal: (row+1, col+1)

Memoization:

#include <bits/stdc++.h>
int getmax(int i ,int j, vector<vector<int>> &dp, vector<vector<int>> &matrix){
    if(j<0 || j>= matrix[0].size()){
        return -1e8;
    }
    if(i == 0){
        return matrix[0][j];
    }
    if(dp[i][j] != -1){
        return dp[i][j];
    }
    int straight = matrix[i][j] + getmax(i-1,j,dp,matrix);
    int leftdg = matrix[i][j]+getmax(i-1,j-1,dp,matrix);
    int rightdg = matrix[i][j]+getmax(i-1,j+1,dp,matrix);
    return dp[i][j] = max(straight,max(leftdg,rightdg));
} 

int getMaxPathSum(vector<vector<int>> &matrix)
{
    int n = matrix.size();
    int m = matrix[0].size();
    vector<vector<int>> dp(n, vector<int>(m,-1));
    int maxi = -1e8;
    for(int j = 0;j<m;j++){
        maxi = max(maxi,getmax(n-1,j,dp,matrix));
    }
    return maxi;
}
