You are given an array containing N non-negative integers. Your task is to partition this array into two subsets such that the 
absolute difference between subset sums is minimum.
You just need to find the minimum absolute difference considering any valid division of the array elements.

Code:

#include <bits/stdc++.h> 
#include <vector>
#include <algorithm>

int minSubsetSumDifference(std::vector<int>& nums,int n) {
    int totalSum = 0;
    for (int i = 0; i < nums.size(); i++) {
        totalSum += nums[i];
    }
    int k = totalSum;
    std::vector<std::vector<bool>> dp(nums.size(), std::vector<bool>(k + 1, false));
    for (int i = 0; i < nums.size(); i++) {
        dp[i][0] = true;
    }
    if (nums[0] <= k) {
        dp[0][nums[0]] = true;
    }
    for (int ind = 1; ind < nums.size(); ind++) {
        for (int target = 1; target <= k; target++) {
            bool notTaken = dp[ind - 1][target];
            bool taken = false;
            if (nums[ind] <= target) {
                taken = dp[ind - 1][target - nums[ind]];
            }
            dp[ind][target] = taken || notTaken;
        }
    }
    int mini = 1e9;
    for (int s1 = 0; s1 <= totalSum; s1++) {
        if (dp[nums.size() - 1][s1]) {
            mini = std::min(mini, std::abs(s1 - (k - s1)));
        }
    }
    return mini;
}

