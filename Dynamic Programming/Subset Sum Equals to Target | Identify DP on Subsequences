Problem Statement
You are given an array/list 'ARR' of 'N' positive integers and an integer 'K'. Your task is to check if there exists a subset in 'ARR' with a sum equal to 'K'.
Note: Return true if there exists a subset with sum equal to 'K'. Otherwise, return false.
For Example:
If 'ARR' is {1,2,3,4} and 'K' = 4, then there exists 2 subsets with sum = 4. These are {1,3} and {4}.
Hence, return true.
(Memoization and Tabulation both codes are there)
Memoization Code :
********************************************************************************************************************************************************************
#include <bits/stdc++.h> 
bool issubseq(int ind, int k, vector<int> &arr, vector<vector<int>> &dp){
    if(k == 0){
        return true;
    }
    if(ind == 0){
        return arr[0] == k;
    }
    if(dp[ind][k] != -1){
        return dp[ind][k];
    }
    bool not_take = issubseq(ind-1,k,arr,dp);
    bool take = false;
    if(arr[ind] <= k){
        take = issubseq(ind-1,k-arr[ind],arr,dp);
    }
    return dp[ind][k] = take || not_take;
}
bool subsetSumToK(int n, int k, vector<int> &arr) {
    // Write your code here.
    vector<vector<int>> dp(n,vector<int>(k+1,-1));
    return issubseq(n-1,k,arr,dp);
}
********************************************************************************************************************************************************************
Tabulation

Code:
bool subsetSumToK(int n, int k, vector<int> &arr) {
    // Write your code here.
    vector<vector<bool>> dp(n,vector<bool>(k+1,false));
    for(int i = 0;i<n;i++){
        dp[i][0] = true;
    }
    dp[0][arr[0]] = true;
    for(int ind = 1;ind<n;ind++){
        for(int target = 1;target<=k;target++){
            bool not_take = dp[ind-1][target];
            bool take = false;
            if(arr[ind] <= target){
                take = dp[ind-1][target-arr[ind]];
            }
            dp[ind][target] = take || not_take;
        }
    }
    return dp[n-1][k];
}
