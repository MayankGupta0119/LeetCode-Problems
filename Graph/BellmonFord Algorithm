It works for graph with negative edges not with negative cycle

code:

#include <iostream>
#include <vector>
using namespace std;
vector<int> bellmonford(int v, vector<vector<int>> &edges, int s, vector<int> &dist)
{
    for (int i = 0; i < v - 1; i++)
    {
        for (auto it : edges)
        {
            int u = it[0];
            int v = it[1];
            int wt = it[2];
            if (dist[u] != 1e8 && dist[u] + wt < dist[v])
            {
                dist[v] = dist[u] + wt;
            }
        }
    }
    for (auto it : edges)
    {
        int u = it[0];
        int v = it[1];
        int wt = it[2];
        if (dist[u] != 1e8 && dist[u] + wt < dist[v])
        {
            return {-1};
        }
    }
    return dist;
}
int main()
{
    int v;
    cout << "enter number of vertex: ";
    cin >> v;
    int e;
    cout << "enter number of edges: ";
    cin >> e;
    vector<vector<int>> edges(e, vector<int>(3));
    for (int i = 0; i < e; i++)
    {
        int u, v, w;
        cin >> u >> v >> w;
        edges[i] = {u, v, w};
    }
    int s;
    cout << "enter source node: ";
    cin >> s;
    vector<int> dist(v, 1e8);
    dist[s] = 0;
    dist = bellmonford(v, edges, s, dist);
    for (int i = 0; i < v; i++)
    {
        cout << "distance of node " << s << " from " << i << " = " << dist[i] << endl;
    }
}
