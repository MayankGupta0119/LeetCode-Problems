#include <iostream>
#include <queue>
using namespace std;
class node
{
public:
    int data;
    node *left, *right;
    node(int data)
    {
        this->data = data;
        this->left = NULL;
        this->right = NULL;
    }
};
node *takeinput(int arr[], int i, int n)
{
    node *root = NULL;
    if (i < n)
    {
        root = new node(arr[i]);
        root->left = takeinput(arr, 2 * i + 1, n);
        root->right = takeinput(arr, 2 * i + 2, n);
    }
    return root;
}
void levelorderprint(node *root)
{
    if (root == NULL)
    {
        return;
    }
    queue<node *> pendingnodes;
    pendingnodes.push(root);
    while (!pendingnodes.empty())
    {
        node *front = pendingnodes.front();
        pendingnodes.pop();
        cout << front->data << " ";
        if (front->left != NULL)
        {
            // cout << front->left->data << " ";
            pendingnodes.push(front->left);
        }
        else
        {
            cout << -1 << " ";
        }
        if (front->right != NULL)
        {
            // cout << front->right->data << " ";
            pendingnodes.push(front->right);
        }
        else
        {
            cout << -1 << " ";
        }
    }
    cout << endl;
}
void preorder(node *root){
    if(root == NULL){
        return;
    }
    cout<<root->data<<" ";
    preorder(root->left);
    preorder(root->right);
}
void postorder(node *root){
    if(root == NULL){
        return;
    }
    postorder(root->left);
    postorder(root->right);
    cout<<root->data<<" ";
}
void inorder(node *root)
{
    if (root == NULL)
    {
        return;
    }
    inorder(root->left);
    cout << root->data << " ";
    inorder(root->right);
}
int main()
{
    int arr[] = {1, 2, 3, 4, 5, 6, 6, 6, 6};
    int n = sizeof(arr) / sizeof(arr[0]);
    node *root = takeinput(arr, 0, n);
    levelorderprint(root);
    inorder(root);
    return 0;
}
