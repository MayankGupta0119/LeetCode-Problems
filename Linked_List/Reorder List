You are given the head of a singly linked-list. The list can be represented as:

L0 → L1 → … → Ln - 1 → Ln
Reorder the list to be on the following form:

L0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → …
You may not modify the values in the list's nodes. Only nodes themselves may be changed.

Example 1:
Input: head = [1,2,3,4]
Output: [1,4,2,3]
Example 2:

Input: head = [1,2,3,4,5]
Output: [1,5,2,4,3]
 
Constraints:

The number of nodes in the list is in the range [1, 5 * 104].
1 <= Node.val <= 1000

Solution:

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode *reverse(ListNode *head){
        if(head == NULL || head->next== NULL){
            return head;
        }
        ListNode *a = reverse(head->next);
        ListNode *tail = head->next;
        tail->next = head;
        head->next = NULL;
        return a;
    }
    ListNode *findmid(ListNode *head){
        if(head == NULL){
            return NULL;
        }
        if(head->next == NULL){
            return head;
        }
        ListNode *fast = head, *slow = head;
        while(fast->next != NULL && fast->next->next != NULL){
            fast = fast->next->next;
            slow = slow->next;
        }
        return slow;
    }
    void reorderList(ListNode* head) {
        ListNode *h1 = head;
        ListNode *fh = NULL, *ft = NULL;
        ListNode *mid = findmid(head);
        ListNode *h2 = mid->next;
        mid->next = NULL;
        h2 = reverse(h2);
        fh = h1;
        ft = h1;
        h1 = h1->next;
        while(h1 != NULL && h2 != NULL){
            ft->next = h2;
            ft = h2;
            h2 = h2->next;
            ft->next = h1;
            ft = h1;
            h1 = h1->next;
        }
        if(h1 == NULL){
            ft->next = h2;
        }
        else{
            ft->next = h1;
        }
        head = fh;
    }
};
