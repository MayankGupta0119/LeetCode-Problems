#include <iostream>
#include <climits>
#include <algorithm>
#include <vector>
using namespace std;
void getsum(vector<int> v, int s, int e, int &maxsum, int &si, int &ei)
{
    if (s == e)
    {
        maxsum = v[s];
        si = s;
        ei = e;
        return;
    }
    int leftmaxsum, ls, le;
    int mid = s + (e - s) / 2;
    getsum(v, s, mid, leftmaxsum, ls, le);
    int rightmaxsum, rs, re;
    getsum(v, mid + 1, e, rightmaxsum, rs, re);
    int sum = 0;
    int os, oe;
    int lsum = INT_MIN;
    int rsum = INT_MIN;
    for (int i = mid; i >= s; i--)
    {
        sum += v[i];
        if (sum > lsum)
        {
            lsum = sum;
            os = i;
        }
    }
    sum = 0;
    for (int i = mid + 1; i <= e; i++)
    {
        sum += v[i];
        if (sum > rsum)
        {
            rsum = sum;
            oe = i;
        }
    }
    int oversum = lsum + rsum;
    if (leftmaxsum >= rightmaxsum && leftmaxsum >= oversum)
    {
        maxsum = leftmaxsum;
        si = ls;
        ei = le;
    }
    else if (rightmaxsum >= leftmaxsum && rightmaxsum >= oversum)
    {
        maxsum = rightmaxsum;
        si = rs;
        ei = re;
    }
    else
    {
        maxsum = oversum;
        si = os;
        ei = oe;
    }
}
int maxsumans(vector<int> v, int s, int e, int &si, int &ei)
{
    int maxsum = 0;
    getsum(v, 0, v.size() - 1, maxsum, si, ei);
    return maxsum;
}

int main()
{
    vector<int> v;
    int n;
    cin >> n;
    for (int i = 0; i < n; i++)
    {
        int x;
        cin >> x;
        v.push_back(x);
    }
    int start, end;
    int maxsum = maxsumans(v, 0, v.size() - 1, start, end);
    cout << maxsum << endl;
    cout << "starting index of max subarray = " << start << endl;
    cout << "ending index of max subarray = " << end << endl;
    return 0;
}
