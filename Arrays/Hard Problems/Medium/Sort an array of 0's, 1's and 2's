class Solution {
public:
    bool ispalindrome(string s, int start, int end) {
        while (start < end) {
            if (s[start] != s[end]) {
                return false;
            }
            start++;
            end--;
        }
        return true;
    }

    string check(string s, vector<vector<int>>& dp) {
        int n = s.length();
        for (int i = 0; i < n; i++) {
            for (int j = 1; j <= n - i; j++) {
                string s1 = s.substr(i, j);
                if (ispalindrome(s, s1, i, i + j - 1)) {
                    dp[i][j] = j;  // This should be correct now
                }
            }
        }
        int maxi = 0;
        int l, r;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (dp[i][j] > maxi) {
                    l = i;
                    r = j;
                    maxi = dp[i][j];
                }
            }
        }
        string lps = s.substr(l, r);
        return lps;
    }

    string longestPalindrome(string s) {
        int n = s.length();
        vector<vector<int>> dp(n, vector<int>(n, 0));
        return check(s, dp);
    }
};
