#include <unordered_map>
int longestSubarrayWithSumK(vector<int> a, long long k) {
    // Write your code here
    long long sum = 0;
    int maxlen = 0;
    int count = 0;
    int start = -1;
    int end = -1;
    unordered_map<long long , int> m;
    for(int i = 0;i<a.size();i++){
        sum += a[i];
        if(sum == k){
            maxlen = max(maxlen,i+1);
            start = 0;
            end = i;
        }
        int remain = sum-k;
        if(m.find(remain) != m.end()){
            int len = i-m[remain];
            if(len > maxlen){
                maxlen = len;
                start = m[remain]+1;
                end = i;
            }
        }
        if(m.find(sum) == m.end()){
            m[sum] = i;
        }
    }
    for(int i = start;i<=end;i++){
       cout<<a[i]<<" ";
    }
    return maxlen;
}
