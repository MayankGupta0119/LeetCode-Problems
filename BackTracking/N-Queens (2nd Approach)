#include <iostream>
#include <vector>
#include <string>
using namespace std;

bool isitsafe(int row, int col, vector<string> &board, int n)
{
    int duprow = row;
    int dupcol = col;

    while (row >= 0 && col >= 0)
    {
        if (board[row][col] == 'Q')
        {
            return false;
        }
        col--;
        row--;
    }

    row = duprow;
    col = dupcol;

    while (col >= 0)
    {
        if (board[row][col] == 'Q')
        {
            return false;
        }
        col--;
    }

    row = duprow;
    col = dupcol;

    while (row < n && col >= 0)
    {
        if (board[row][col] == 'Q')
        {
            return false;
        }
        col--;
        row++;
    }

    return true;
}

void checksafeseq(int col, vector<string> &board, vector<vector<string>> &ans, int n)
{
    if (col == n)
    {
        ans.push_back(board);
        return;
    }

    for (int row = 0; row < n; row++)
    {
        if (isitsafe(row, col, board, n))
        {
            board[row][col] = 'Q';
            checksafeseq(col + 1, board, ans, n);
            board[row][col] = '.';
        }
    }
}

int main()
{
    int n;
    cin >> n;

    vector<vector<string>> ans;
    vector<string> board(n);
    string s(n, '.');
    for (int i = 0; i < n; i++)
    {
        board[i] = s;
    }

    checksafeseq(0, board, ans, n);

    if (ans.empty())
    {
        cout << "No valid arrangements exist for the given board size." << endl;
    }
    else
    {
        for (int i = 0; i < ans.size(); i++)
        {
            cout << "Arrangement " << i + 1 << endl;
            for (int j = 0; j < ans[i].size(); j++)
            {
                cout << ans[i][j] << endl;
            }
            cout << endl;
        }
    }

    return 0;
}
