Problem LINK:
https://www.codingninjas.com/codestudio/problems/partitions-with-given-difference_3751628?source=youtube&campaign=striver_dp_videos&utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_dp_videos
Problem Statement
Given an array 'ARR', partition it into two subsets (possibly empty) such that their union is the original array. Let the sum of the elements of these two subsets
be 'S1' and 'S2'.
Given a difference 'D', count the number of partitions in which 'S1' is greater than or equal to 'S2' and the difference between 'S1' and 'S2' is equal to 'D'.
Since the answer may be too large, return it modulo *10^9 + 7'.

Code:

#include <bits/stdc++.h>
int mod =(int)1e9+7; 
int findways(int ind, int target, vector<vector<int>> &dp, vector<int> &arr){
    if(target == 0) return 1;
    if(ind == 0){
        if(target == 0 || arr[0] == target){
            return 1;
        }
        else{
            return 0;
        }
    }
    if(dp[ind][target] != -1){
        return dp[ind][target];
    }
    int not_pick = findways(ind-1,target,dp,arr);
    int pick = 0;
    if(arr[ind] <= target){
        pick = findways(ind-1,target-arr[ind],dp,arr);
    }
    return dp[ind][target] = (pick+not_pick)%mod;
}
int countPartitions(int a, int d, vector<int> &arr) {
    int n = arr.size();
    int totalsum = 0;
    sort(arr.rbegin(),arr.rend());
    for(int i = 0;i<n;i++){
        totalsum += arr[i];
    }
    if((totalsum-d) <0 || (totalsum-d)%2 == 1){
        return 0;
    }
    int s2 = (totalsum-d)/2;
    vector<vector<int>> dp(n,vector<int> (s2+1,-1));
    return findways(n-1,s2,dp,arr);
}
***********************************************************************************************************************************************************************
Tabulation :

int countPartitions(int a, int d, vector<int> &arr) {
    int n = arr.size();
    int totalsum = 0;
    sort(arr.rbegin(),arr.rend());
    for(int i = 0;i<n;i++){
        totalsum += arr[i];
    }
    if((totalsum-d) <0 || (totalsum-d)%2 == 1){
        return 0;
    }
    int s2 = (totalsum-d)/2;
    vector<vector<int>> dp(n,vector<int> (s2+1,0));
    for(int ind = 0;ind<n;ind++){
        dp[ind][0] = 1;
    }
    if(arr[0] <= s2){
        dp[0][arr[0]] = 1;
    }
    for(int ind = 1;ind<n;ind++){
        for(int target = 0;target<= s2;target++){
            int not_take = dp[ind-1][target];
            int take=  0;
            if(arr[ind] <= target){
                take = dp[ind-1][target-arr[ind]];
            }
            dp[ind][target] = (take+not_take)%mod;
        }
    }
    return dp[n-1][s2];
}


